package wom.values

import wom.types._

import scala.util.{Success, Try}

sealed trait WomFile extends WomValue {
  def value: String

  override def valueString = value

  /**
    * Converts the location using f() recursively converting any files referred to by this file.
    *
    * @param f The function to update the location.
    * @return A new WomFile with the updated location.
    */
  def mapFile(f: String => String): WomFile
}

sealed trait WomPrimitiveFile extends WomFile with WomPrimitive

/**
  * A directory represented only by a path to a directory.
  *
  * Should not be passed into command line generation. Instead, the execution engine should create a WomListedDirectory
  * locating the files/directories within the `value` and filling in the listing.
  *
  * @param value The location of the directory, possibly in the cloud.
  */
final case class WomUnlistedDirectory(value: String) extends WomPrimitiveFile {
  override val womType: WomType = WomUnlistedDirectoryType

  override def toWomString = s""""$value""""

  override def add(rhs: WomValue): Try[WomValue] = rhs match {
    case r: WomString => Success(this.copy(value = value + r.value))
    case r: WomOptionalValue => evaluateIfDefined("+", r, add)
    case _ => invalid(s"$value + $rhs")
  }

  override def equals(rhs: WomValue): Try[WomBoolean] = rhs match {
    case r: WomUnlistedDirectory => Success(WomBoolean(value.equals(r.value) && womType.equals(r.womType)))
    case r: WomString => Success(WomBoolean(value.toString.equals(r.value.toString)))
    case r: WomOptionalValue => evaluateIfDefined("==", r, equals)
    case _ => invalid(s"$value == $rhs")
  }

  override def mapFile(f: String => String): WomUnlistedDirectory = {
    this.copy(value = f(value))
  }
}

/**
  * A file with no additional files.
  *
  * @param value The location of the file, possibly in the cloud.
  */
final case class WomSingleFile(value: String) extends WomPrimitiveFile {

  override val womType: WomType = WomSingleFileType

  override def toWomString = s""""$value""""

  override def add(rhs: WomValue): Try[WomValue] = rhs match {
    case r: WomString => Success(this.copy(value = value + r.value))
    case r: WomOptionalValue => evaluateIfDefined("+", r, add)
    case _ => invalid(s"$value + $rhs")
  }

  override def equals(rhs: WomValue): Try[WomBoolean] = rhs match {
    case r: WomSingleFile => Success(WomBoolean(value.equals(r.value) && womType.equals(r.womType)))
    case r: WomString => Success(WomBoolean(value.toString.equals(r.value.toString)))
    case r: WomOptionalValue => evaluateIfDefined("==", r, equals)
    case _ => invalid(s"$value == $rhs")
  }

  override def mapFile(f: String => String): WomSingleFile = {
    this.copy(value = f(value))
  }
}

/**
  * A glob that will be expanded into an array of files from the path in value.
  *
  * Ex:
  * {{{
  *   Array[File] myBams = glob("outdir/\*.bam")
  * }}}
  *
  * @param value The path of the glob within the container.
  */
final case class WomGlobFile(value: String) extends WomPrimitiveFile {
  override val womType: WomType = WomGlobFileType

  override def toWomString = s"""glob("$value")"""

  override def add(rhs: WomValue): Try[WomValue] = rhs match {
    case r: WomString => Success(this.copy(value + r.value))
    case r: WomOptionalValue => evaluateIfDefined("+", r, add)
    case _ => invalid(s"$value + $rhs")
  }

  override def equals(rhs: WomValue): Try[WomBoolean] = rhs match {
    case r: WomGlobFile => Success(WomBoolean(value.equals(r.value) && womType.equals(r.womType)))
    case r: WomString => Success(WomBoolean(value.toString.equals(r.value.toString)))
    case r: WomOptionalValue => evaluateIfDefined("==", r, equals)
    case _ => invalid(s"$value == $rhs")
  }

  override def mapFile(f: String => String): WomGlobFile = this.copy(value = f(value))
}

/**
  * A directory with a listing of other files/directories.
  *
  * @param value   The location of the directory, possibly in the cloud.
  * @param listing An listing of files/directories, either supplied by a user or generated by the engine.
  */
final case class WomListedDirectory(value: String, listing: Seq[WomFile]) extends WomFile {
  override val womType: WomType = WomListedDirectoryType

  override def mapFile(f: String => String): WomListedDirectory = {
    this.copy(value = f(value), listing.map(_.mapFile(f)))
  }
}

/**
  * A directory with a to-be-generated path listing other files/directories.
  *
  * @param listing An listing of files/directories, either supplied by a user or generated by the engine.
  */
final case class WomListedLiteral(listing: Seq[WomFile]) extends WomFile {

  override def value: String = throw new UnsupportedOperationException("A listed literal does not have a value")

  override val womType: WomType = WomListedLiteralType

  override def mapFile(f: String => String): WomListedLiteral = {
    this.copy(listing.map(_.mapFile(f)))
  }
}

/**
  * A file with a path and secondary files.
  *
  * @param value          The location of the file, possibly in the cloud.
  * @param secondaryFiles Any files associated with this file.
  * @param formatOption   An optional format description of the file contents.
  */
final case class WomPrimaryFile(value: String, secondaryFiles: Seq[WomFile], formatOption: Option[String]) extends WomFile {

  override val womType: WomType = WomPrimaryFileType

  override def mapFile(f: String => String): WomPrimaryFile = {
    this.copy(value = f(value), secondaryFiles = secondaryFiles.map(_.mapFile(f)))
  }
}

/**
  * A file with a to-be-generated path where the contents must be written by the backend to the file location.
  *
  * @param contents       The contents of the file.
  * @param secondaryFiles Any files associated with this file.
  * @param formatOption   An optional format description of the file contents.
  */
final case class WomContentLiteral(contents: String,
                                   secondaryFiles: Seq[WomFile],
                                   formatOption: Option[String]) extends WomFile {

  override def value: String = throw new UnsupportedOperationException("A content literal does not have a value")

  override val womType: WomType = WomContentLiteralType

  override def mapFile(f: String => String): WomContentLiteral = {
    this.copy(secondaryFiles = secondaryFiles.map(_.mapFile(f)))
  }
}

/**
  * A file populated with a path plus optional checksum/size/etc.
  *
  * @param value          The location of the file, possibly in the cloud.
  * @param checksumOption An optional checksum of the file contents.
  * @param sizeOption     An optional size of the file contents in bytes.
  * @param formatOption   An optional format description of the file contents.
  * @param contentsOption The optional text contents of the file.
  * @param secondaryFiles Any files associated with this file.
  */
final case class WomPopulatedFile(value: String,
                                  checksumOption: Option[String],
                                  sizeOption: Option[Long],
                                  formatOption: Option[String],
                                  contentsOption: Option[String],
                                  secondaryFiles: Seq[WomFile]) extends WomFile {

  override val womType: WomType = WomPopulatedFileType

  override def mapFile(f: String => String): WomPopulatedFile = {
    this.copy(value = f(value), secondaryFiles = secondaryFiles.map(_.mapFile(f)))
  }
}
